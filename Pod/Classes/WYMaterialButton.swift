//
//  WYMaterialButton.swift
//  WYMaterialButton
//
//  Created by Wang Yu on 9/24/15.
//
//

import UIKit
import QuartzCore

let presetMaterialColor = UIColor(red:0.93, green:0.94, blue:0.95, alpha:1)

@IBDesignable
public class WYMaterialButton: DesignableButton {

    private let animationDuration = 0.75

    @IBInspectable
    public var materialBackgroundColor: UIColor = UIColor.clearColor() {
        didSet {
            self.materialBackgroundView.backgroundColor = self.materialBackgroundColor
            if autoSetupColor == true {
                self.backgroundColor = self.materialBackgroundColor
                self.materialPressedColor = autoGenerateDeeperColor(self.materialBackgroundColor)
                let textColor = autoGenerateContrastColor(self.materialBackgroundColor)
                self.setTitleColor(textColor, forState: UIControlState.Normal)
            }
        }
    }
    
    @IBInspectable
    public var materialPressedColor: UIColor = presetMaterialColor {
        didSet {
            self.materialPressedView.backgroundColor = self.materialPressedColor
        }
    }
    
    @IBInspectable
    var autoSetupColor: Bool = true
    @IBInspectable
    public var touchLocationEnable: Bool = true
    @IBInspectable
    public var materialEffectPercent: CGFloat = 0.8 * 1.25 {
        didSet {
            self.materialEffectPercent = self.materialEffectPercent * 1.25
            self.configureMaterialPressedView()
        }
    }
    
    public func autoGenerateDeeperColor(color: UIColor) -> UIColor {
        let colorComponent = CGColorGetComponents(color.CGColor)
        let newRed = max(colorComponent[0] - 0.05, 0)
        let newGreen = max(colorComponent[1] - 0.1, 0)
        let newBlue = max(colorComponent[2] - 0.13, 0)
        return UIColor(red: newRed, green: newGreen, blue: newBlue, alpha: 1)
    }
    
    public func autoGenerateContrastColor(color: UIColor) -> UIColor {
        let colorComponent = CGColorGetComponents(color.CGColor)
        var d: CGFloat = 0
        let a = 1 - (0.299 * colorComponent[0] + 0.587 * colorComponent[1] + 0.114 * colorComponent[2])
        d = a < 0.5 ? 0 : 1
        return UIColor(red: d, green: d, blue: d, alpha: 1)
    }
    
    public required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        configure()
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        configure()
    }
    
    public override func layoutSubviews() {
        super.layoutSubviews()
        
        let previousCenter = self.materialPressedView.center
        self.configureMaterialPressedView()
        
        self.materialPressedView.center = previousCenter
        self.materialBackgroundView.layer.frame = self.bounds
        
        let buttonMask = CAShapeLayer()
        buttonMask.path = UIBezierPath(roundedRect: self.bounds, cornerRadius: self.layer.cornerRadius).CGPath
        self.materialBackgroundView.layer.mask = buttonMask
    }
    
    private func configure() {
        self.configureMaterialPressedView()
        self.configureMaterialBackgroundView()
    }
    
    let materialPressedView = UIView()
    private func configureMaterialPressedView() {
        let materialEffectBounds: CGFloat = self.bounds.width * materialEffectPercent
        self.materialPressedView.frame = CGRectMake(CGRectGetMidX(self.bounds) - materialEffectBounds/2, CGRectGetMidY(self.bounds) - materialEffectBounds/2, materialEffectBounds, materialEffectBounds)
        self.materialPressedView.backgroundColor = self.materialPressedColor
        self.materialPressedView.layer.cornerRadius = materialEffectBounds/2
    }
    
    let materialBackgroundView = UIView()
    private func configureMaterialBackgroundView() {
        self.materialBackgroundView.backgroundColor = self.materialBackgroundColor
        self.materialBackgroundView.frame = self.bounds
        self.layer.addSublayer(materialBackgroundView.layer)
        self.materialBackgroundView.layer.addSublayer(self.materialPressedView.layer)
        self.materialBackgroundView.alpha = 0
    }
    
    public override func beginTrackingWithTouch(touch: UITouch, withEvent event: UIEvent?) -> Bool {
        self.materialBackgroundView.alpha = 1
        if self.touchLocationEnable == true {
            self.materialPressedView.center = touch.locationInView(self)
        }
        self.materialPressedView.transform = CGAffineTransformMakeScale(0.5, 0.5)
        
        UIView.animateWithDuration(animationDuration, delay: 0, options: UIViewAnimationOptions.CurveEaseOut, animations: { () -> Void in
                self.materialPressedView.transform = CGAffineTransformIdentity
            }, completion: nil)
        
        return super.beginTrackingWithTouch(touch, withEvent: event)
    }
    
    public override func cancelTrackingWithEvent(event: UIEvent?) {
        super.cancelTrackingWithEvent(event)
        self.materialBackgroundView.alpha = 1
        UIView.animateWithDuration(animationDuration, animations: { () -> Void in
            self.materialBackgroundView.alpha = 0
        })
    }
    
    public override func endTrackingWithTouch(touch: UITouch?, withEvent event: UIEvent?) {
        super.endTrackingWithTouch(touch, withEvent: event)
        self.materialBackgroundView.alpha = 1
        UIView.animateWithDuration(animationDuration, animations: { () -> Void in
            self.materialBackgroundView.alpha = 0
        })
    }
}
